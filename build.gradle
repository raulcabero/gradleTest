apply plugin: "groovy"
apply plugin: "java"
apply plugin: "checkstyle"

group = 'com.softlayer.api.automation'
version = "0.0.1-SNAPSHOT"
description = "SoftLayer API automation"

// Spock works with Java 1.7 and above
sourceCompatibility = 1.7

repositories {
  // Spock releases are available from Maven Central
  mavenCentral()
  // Spock development snapshots are available from Spock's Maven repo
  maven { url "http://m2repo.spockframework.org/snapshots" }
}

sourceSets {
    sysTest {
        java.srcDir file('src/sysTest/java')
        groovy.srcDir file('src/sysTest/groovy')
        resources.srcDir file('src/sysTest/resources')
    }
    
    integTest{
       java.srcDir file('src/integTest/java')
       groovy.srcDir file('src/integTest/groovy')
       resources.srcDir file('src/integTest/resources')
    }
}


dependencies {
  // groovy 
  testCompile "org.codehaus.groovy:groovy-all:2.4.3"
  // mandatory dependencies for using Spock
  //testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
  //testCompile "org.apache.commons:commons-csv:1.2"
  testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
  testCompile "org.apache.commons:commons-csv:1.2"
  // optional dependencies for using Spock
  testCompile "org.hamcrest:hamcrest-core:1.2" // only necessary if Hamcrest matchers are used
  testCompile "cglib:cglib-nodep:2.2"          // allows mocking of classes (in addition to interfaces)
  testCompile "org.objenesis:objenesis:1.2"    // allows mocking of classes without default constructor (together with CGLIB)
  testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7"
  
  sysTestCompile sourceSets.main.output
  sysTestCompile configurations.testCompile
  sysTestCompile sourceSets.test.output
  sysTestRuntime configurations.testRuntime
  
  
  integTestCompile sourceSets.main.output
  integTestCompile configurations.testCompile
  integTestCompile sourceSets.test.output
  integTestRuntime configurations.testRuntime
  
}

task systemTest(type: Test) {
    testClassesDir = sourceSets.sysTest.output.classesDir
    classpath = sourceSets.sysTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
      showStandardStreams = true
	  exceptionFormat = 'full'
	  events "passed", "skipped", "failed"
   }
}

task bvtTest(type: Test) {
	testClassesDir = sourceSets.sysTest.output.classesDir
	classpath = sourceSets.sysTest.runtimeClasspath
	outputs.upToDateWhen { false }
	testLogging {
	  showStandardStreams = true
	  exceptionFormat = 'full'
	  events "passed", "skipped", "failed"
   }
	
	filter {
		includeTestsMatching "com.softlayer.api.automation.systest.bvt.*"
	}
}


task functionalTest(type: Test) {
	testClassesDir = sourceSets.sysTest.output.classesDir
	classpath = sourceSets.sysTest.runtimeClasspath
	outputs.upToDateWhen { false }
	testLogging {
	  showStandardStreams = true
	  exceptionFormat = 'full'
	  events "passed", "skipped", "failed"
   }	
	filter {
		includeTestsMatching "com.softlayer.api.automation.systest.functional.*"
	}
}


task integrationTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
      showStandardStreams = true
	  exceptionFormat = 'full'
	  events "passed", "skipped", "failed"
   }
}


tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
		
	}
}

integrationTest.mustRunAfter test
systemTest.mustRunAfter integrationTest
check.dependsOn systemTest, integrationTest

